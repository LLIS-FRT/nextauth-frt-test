// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// enum UserRole_ {
//   USER // Any user that has an account
//   MEMBER // A member of the First Responder Team
//   ADMIN // A member with full access
// }

// model User {
//   id                    String                 @id @default(cuid())
//   name                  String?
//   email                 String                 @unique
//   emailVerified         DateTime?
//   image                 String?
//   password              String?
//   roles                 UserRole_[]             @default([USER])
//   accounts              Account[]
//   isTwoFactorEnabled    Boolean                @default(false)
//   twoFactorConfirmation TwoFactorConfirmation?
//   // Optional for WebAuthn support
//   Authenticator         Authenticator[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
// }

// // Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }

// model VerificationToken {
//   id      String   @id @default(cuid())
//   email   String
//   token   String   @unique
//   expires DateTime

//   @@unique([email, token])
// }

// model PasswordResetToken {
//   id      String   @id @default(cuid())
//   email   String
//   token   String   @unique
//   expires DateTime

//   @@unique([email, token])
// }

// model TwoFactorToken {
//   id      String   @id @default(cuid())
//   email   String
//   token   String   @unique
//   expires DateTime

//   @@unique([email, token])
// }

// model TwoFactorConfirmation {
//   id String @id @default(cuid())

//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId])
// }

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_2")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole_ {
  USER // Any user that has an account
  MEMBER // A member of the First Responder Team
  ADMIN // A member with full access
}

enum PermissionName {
  ADMINISTRATOR // Full access

  // Availabilities
  CREATE_OWN_AVAILABILITY // Create availability for the current user
  VIEW_OWN_AVAILABILITY // View only the availabilities of the current user
  UPDATE_OWN_AVAILABILITY // Update only the availabilities of the current user
  DELETE_OWN_AVAILABILITY // Delete only the availabilities of the current user

  CREATE_ANY_AVAILABILITY // Create availabilities for other users
  VIEW_ANY_AVAILABILITY // View availabilities of any user
  UPDATE_ANY_AVAILABILITY // Update availabilities of any user
  DELETE_ANY_AVAILABILITY // Delete availabilities of any user

  // Reports
  CREATE_OWN_REPORT // Create reports for the current user
  CREATE_ANY_REPORT // Create any reports

  VIEW_OWN_REPORT // View reports the current user is part of
  UPDATE_OWN_REPORT // Update reports the current user is part of

  VIEW_ANY_REPORT // View reports of any user
  UPDATE_ANY_REPORT // Update reports of any user
  DELETE_ANY_REPORT // Delete reports of any user

  // Shifts
  CREATE_OWN_SHIFT // Create shifts for the current user
  VIEW_OWN_SHIFT // View shifts the current user is part of

  DELETE_ANY_SHIFT // Delete shifts of any user
  VIEW_ANY_SHIFT // View shifts of any user
  CREATE_ANY_SHIFT // Create shifts for other users

  // Teams
  VIEW_OWN_TEAM // View teams the current user is part of

  CREATE_TEAM // Create new teams
  VIEW_ANY_TEAM // View any team
  UPDATE_ANY_TEAM // Update any team
  DELETE_ANY_TEAM // Delete any team

  // Exams
  VIEW_ANY_EXAM // View all exams (including for other users)
  UPDATE_OWN_EXAM // Update exams related to the current user

  UPDATE_ANY_EXAM // Update any exam

  // Profiles
  VIEW_OWN_PROFILE // View only the profile of the current user
  VIEW_ANY_PROFILE // View profile of any user

  // Files
  UPLOAD_FILE // Upload files
}

model Permission {
  id   String         @id @default(auto()) @map("_id") @db.ObjectId
  name PermissionName @unique

  userRolesIds String[]   @db.ObjectId
  userRoles    UserRole[] @relation(fields: [userRolesIds], references: [id])
}

model UserRole {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  permissionIds String[]     @db.ObjectId
  permissions   Permission[] @relation(fields: [permissionIds], references: [id])

  userIds String[] @db.ObjectId
  Users   User[]   @relation(fields: [userIds], references: [id])
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  IAM                   String?                @unique
  studentClass          String                 @default("None")
  removedExams          String[]               @default([])
  removedSubjects       String[]               @default([])
  removedTeachers       String[]               @default([])
  firstName             String?
  lastName              String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  roles                 UserRole_[]            @default([USER])
  accounts              Account[] // Relation to Account model (1-to-many)
  isTwoFactorEnabled    Boolean                @default(false)
  onboardingComplete    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation? // Relation to TwoFactorConfirmation model (optional)
  Authenticator         Authenticator[] // Relation to Authenticator model (WebAuthn support)

  availabilities          Availability[] // User availabilities as the `user`
  confirmedAvailabilities Availability[] @relation("ConfirmedAvailabilities") // User confirming availabilities as the `confirmedBy`

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Report    Report[]

  createdShifts Shift[] @relation("CreatedShifts") // User confirming availabilities as the `confirmedBy`

  Shifts   Shift[]  @relation("AssignedShifts", fields: [shiftIds], references: [id]) // User confirming availabilities as the `confirmedBy`
  shiftIds String[] @db.ObjectId

  lastActiveAt DateTime @default(now())

  UserRoleIds String[]   @db.ObjectId
  UserRoles   UserRole[] @relation(fields: [UserRoleIds], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
}

//#region Reports
model Report {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  createdBy       User    @relation(fields: [createdById], references: [id])
  createdById     String  @db.ObjectId
  missionNumber   Int     @unique
  patientInfo     Json    @default("{}")
  firstResponders Json    @default("{}")
  missionInfo     Json    @default("{}")
  samplerSchema   Json    @default("{}")
  abcdeSchema     Json    @default("{}")
  archived        Boolean @default(false)
  resolved        Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//#endregion

model Availability {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  startDate DateTime
  endDate   DateTime
  confirmed Boolean

  confirmedAt DateTime?

  confirmedBy       User?   @relation("ConfirmedAvailabilities", fields: [confirmedByuserId], references: [id])
  confirmedByuserId String? @db.ObjectId
}

model Shift {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  users   User[]   @relation("AssignedShifts", fields: [userIds], references: [id])
  userIds String[] @db.ObjectId

  userPositions Json @default("{}")

  startDate DateTime
  endDate   DateTime

  createdAt DateTime?

  createdBy       User?   @relation("CreatedShifts", fields: [createdByuserId], references: [id])
  createdByuserId String? @db.ObjectId

  Team   Team?   @relation(fields: [teamId], references: [id])
  teamId String? @db.ObjectId
}

model Team {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String   @unique
  shifts            Shift[]
  status            Int      @default(6)
  minUsers          Int      @default(1)
  maxUsers          Int      @default(3)
  possiblePositions String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
